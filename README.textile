h1.Thought Process and Assumptions

When I first started planning this out, I ended up falling into the trap that I think a lot of programmers fall into: thinking about all of the features and things that could be added to make it awesome.  I even started off by building this application with no back-end using Firebase, which I realized isn't suited for this type of project.  It certainly made me more fully appreciate Ruby on Rails as a framework, which this app is built in.  I have no preference to which language I use, Ruby on Rails is just most familiar to me for building full applications, and it seemed to be the best tool for the job for me in this instance.

Turns out, job application app can be a lot of things, and can have all kinds of bells and whistles.  There could be ajax calls all over the place, different applications for different types of jobs or departments in a company, etc.  I really had to zero in on the scope of this project and focus in one the core of the project.  I think the best way to build applications is to start with the core of the idea, and then iterate from there based on feedback you get.  I decided this project should be no different, and that I would get the base functionality up to where it would be a usable application, but could be changed at a later time.

The decision about how to implement the questions and whether or not to have them be dynamic was probably the one I fought with the most.  I could have stored everything as individual applications, with links to a user, questions, user's answers, and linking questions to answers, but I decided that I could do this in a much more simple way with only a relatively small loss in functionality.  In the code you'll see that I have two models: applicants and questions.  This is limiting because I essentially hardcoded the number of questions associated with a user, which isn't necessarily a relational database best practice.  However, with only two models it made the development of the initial product a lot faster, and questions can still be changed on the fly and be reflected back on the applications.

I'm open to feedback as to what else the application should or should not do.  Like I said I know there are limitations to how I implemented this, but due primarily to time constraints (I can't keep working on this indefintely especially with a day job and a wife), this is how I intentionally decided to do things.  I'd love to have the conversation though on how to better do things.